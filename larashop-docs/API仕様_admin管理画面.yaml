openapi: 3.0.3
info:
  title: Larashop Admin API - OpenAPI 3.0
  version: '20230701'
tags:
  - name: Auth
    description: 認証
  - name: Deal
    description: 取引
  - name: User
    description: ユーザー
paths:

  /admin/api/auth/signin:
    post:
      tags:
        - Auth
      summary: ログインAPI
      description: ログイン用のAPI。Bearerトークンを発行する。
      operationId: signin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SigninRequest"
      responses:
        '200':
          description: 会員仮登録成功時
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '400':
          description: 会員本登録失敗時
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "メールアドレスまたはパスワードが間違っています。"
        '422':
          description: バリデーションエラー時
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: バリデーションエラー
                errors:
                  - field: email
                    detail: メールアドレスは必須です。
                  - field: password
                    detail: パスワードは必須です。

  /admin/api/auth/signout:
    post:
      tags:
        - Auth
      summary: ログアウトAPI
      description: ログアウト用のAPI。サーバー側にあるBearerトークンを無効化する。
      operationId: signout
      security: [bearerAuth: []]
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        '200':
          description: ログアウト成功時
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResult'
        '400':
          description: ログアウト失敗時
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: エラーが発生しました。
  /admin/api/auth/me:
    get:
      tags:
        - Auth
      summary: ログインユーザー取得API
      description: ログインユーザー情報を取得
      operationId: getMe
      security: [bearerAuth: []]
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'
          
  /admin/api/deals:
    get:
      tags:
        - Deal
      summary: 取引一覧取得API
      description: 取引一覧情報を取得
      operationId: getDeals
      security: [bearerAuth: []]
      parameters:
        - name: keyword
          in: query
          description: 検索キーワード。氏名か商品名で検索します
          required: false
          schema:
            type: string
        - name: min_price
          in: query
          description: 金額最小
          required: false
          schema:
            type: integer
        - name: max_price
          in: query
          description: 金額最大
          required: false
          schema:
            type: integer
        - name: status
          in: query
          description: ステータス
          required: false
          schema:
            type: string
            enum:
              - "listing"
              - "purchased"
              - "shipping"
              - "completed"
              - "canceled"
        - name: page
          in: query
          description: ページ番号
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: 1ページあたりの表示数
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Pagination'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        deals:
                          type: array
                          items:
                            $ref: '#/components/schemas/Deal'

  /admin/api/deals/{id}:
    get:
      tags:
        - Deal
      summary: 取引詳細取得API
      description: 取引詳細情報を取得
      operationId: getDeal
      security: [bearerAuth: []]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DealDetail'
        '404':
          description: Not Found

          
  /admin/api/users:
    get:
      tags:
        - User
      summary: ユーザー一覧取得API
      description: ユーザー一覧情報を取得
      operationId: getUsers
      security: [bearerAuth: []]
      parameters:
        - name: keyword
          in: query
          description: 検索キーワード。氏名で検索します
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: ページ番号
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: 1ページあたりの表示数
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Pagination'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        users:
                          type: array
                          items:
                            $ref: '#/components/schemas/User'

  /admin/api/users/{id}:
    get:
      tags:
        - User
      summary: ユーザー詳細取得API
      description: ユーザー詳細情報を取得
      operationId: getUser
      security: [bearerAuth: []]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found

  /admin/api/users/{id}/purchased_deals:
    get:
      tags:
        - User
      summary: ユーザー購入取引一覧API
      description: ユーザーの購入した取引一覧を取得
      operationId: getUserPurchasedDeals
      security: [bearerAuth: []]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  deals:
                    type: array
                    items:
                      $ref: '#/components/schemas/Deal'
        '404':
          description: Not Found

  /admin/api/users/{id}/listed_deals:
    get:
      tags:
        - User
      summary: ユーザー出品取引一覧API
      description: ユーザーの出品した取引一覧を取得
      operationId: getUserListedDeals
      security: [bearerAuth: []]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  deals:
                    type: array
                    items:
                      $ref: '#/components/schemas/Deal'
        '404':
          description: Not Found

components:
  schemas:
    AccessToken:
      type: "object"
      properties:
        access_token:
          type: "string"
          example: "eyJ0eXAiOABCDEFG1234567890"
        admin_user:
          $ref: "#/components/schemas/AdminUser"
      required:
        - access_token
        - user
      
    AdminUser:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
        email:
          type: "string"
          example: "admin@example.com"
        name:
          type: "string"
          example: "Larashop Admin"
      required:
        - id
        - email
        - name

    Pagination:
      type: object
      properties:
        meta:
          type: object
          properties:
            current_page:
              type: integer
              example: 2
            from:
              type: integer
            last_page:
              type: integer
            per_page:
              type: integer
            to:
              type: integer
            total:
              type: integer

    User:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
        email:
          type: "string"
          example: "taro@example.com"
        name:
          type: "string"
          example: "山田 太郎"
        postal_code:
          type: "string"
          example: "100-8111"
        address:
          type: "string"
          example: "東京都千代田区千代田1-1"
        tel:
          type: "string"
          example: "03-1234-5678"
        nickname:
          type: "string"
          example: "たろう"
        profile_image_url:
          type: "string"
          nullable: true
          example: "https://example.com/profile.jpg"
        description:
          type: "string"
          example: "こんにちは、山田太郎です。"
      required:
        - id
        - email
        - name
        - birthday
        - postal_code
        - address
        - tel
        - nickname
        - profile_image_url
        - description

    Product:
      properties:
        id:
          type: "integer"
          example: 1
        name:
          type: "string"
          example: "黒Tシャツ"
        description:
          type: "string"
          example: "ブランドXYZの黒Tシャツです。男性用Sサイズで、新品未使用です。"
        image_url:
          type: "string"
          example: "https://images.pexels.com/photos/9558567/pexels-photo-9558567.jpeg"
        image_urls:
          type: "array"
          items:
            type: string  
          example: [
            "https://images.pexels.com/photos/9558567/pexels-photo-9558567.jpeg",
            "https://images.pexels.com/photos/9558567/pexels-photo-9558567.jpeg",
            "https://images.pexels.com/photos/9558567/pexels-photo-9558567.jpeg"
          ]
        price:
          type: "integer"
          example: 3000
        deal:
          $ref: "#/components/schemas/Deal"
      required:
        - id
        - name
        - description
        - image_url
        - image_urls
        - price
        - deal
    Deal:
      properties:
        id:
          type: "integer"
          example: 1
        product:
          $ref: "#/components/schemas/Product"
        seller:
          $ref: "#/components/schemas/User"
        buyer:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/User'
        status:
          type: "string"
          enum:
            - "listing"
            - "purchased"
            - "shipping"
            - "completed"
            - "canceled"
      required:
        - id
        - product
        - seller
        - buyer
    DealDetail:
      allOf:
        - $ref: "#/components/schemas/Deal"
        - type: object
          properties:
            deal_events:
              type: "array"
              items:
                $ref: "#/components/schemas/DealEvent"
          required:
            - deal_events

    DealEvent:
      properties:
        id:
          type: integer
          example: 1
        actor_type:
          type: "string"
          enum:
            - "seller"
            - "buyer"
            - "admin"
        event_type:
          type: "string"
          enum: 
            - "listing"
            - "purchase"
            - "report_delivery"
            - "report_receipt"
            - "payment_refund"
            - "cancel"

    PaymentIntent:
      properties:
        client_secret:
          type: "string"

    OperationResult:
      properties:
        success:
          type: "boolean"
          example: true
      required:
        - success

# ---------- ErrorObjects ----------
# エラー時のレスポンスは https://docs.github.com/ja/rest/overview/resources-in-the-rest-api#client-errors を参考にしました。

    ErrorResponse:
      properties:
        message:
          type: "string"
          example: "バリデーションエラー"
        errors:
          type: "array"
          items:
            $ref: "#/components/schemas/ErrorDetail"
      required:
        - message

    ErrorDetail:
      properties:
        field:
          type: "string"
          example: "email"
        detail:
          type: "string"
          example: "メールアドレスを入力してください"
      required:
        - field
        - detail

# ---------- RequestObjects ----------

    SigninRequest:
      properties:
        email:
          type: "string"
          example: "test@email.com"
        password:
          type: "string"
          example: "test-password"
      required:
        - email
        - password

    CancelRequest:
      properties:
        stripe_token:
          type: "string"
      required:
        - stripe_token

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer